#include <cstdlib>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <sstream>
#include <ctime>
#include "namegen.h"
#include "Listpack-Caste.h"
#include "Listpack-Interests.h"
#include "Listpack-Strife.h"
#include "Listpack-Handle1.h"
#include "Listpack-Handle2.h"

// all code by Wirrit (as far as I can remember)
// some item suggestions from friends online

using namespace std;

    string playname1[24] = "";
    string playname2[24] = "";
    string playinitials[24] = "";
    string playhandle[24] = "";

    string playcol[24] = "";
    string playinterest1[24] = "";
    string playinterest2[24] = "";
    string playspecibus[24] = "";
    string playweapon[24] = "";

    string quadflush[24] = "no one";
    string quadpitch[24] = "no one";
    string quadpale[24] = "no one";
    string quadashen1[24] = "no one";
    string quadashen2[24] = "no one";
    // note to self : update ashen to distinguish who the top leaf is.
    int sessionsize = 0;

// This section is for tiny functions we will use Constantly.

bool areflush(int a, int b) {
    bool c = 0;
    if ((quadflush[a] == playname1[b]) and (quadflush[b] == playname1[a])) {c=1;};
    return c;
}
bool arepale(int a, int b) {
    bool c = 0;
    if ((quadpale[a] == playname1[b]) and (quadpale[b] == playname1[a])) {c=1;};
    return c;
}
bool arepitch(int a, int b) {
    bool c = 0;
    if ((quadpitch[a] == playname1[b]) and (quadpitch[b] == playname1[a])) {c=1;};
    return c;
}
bool areashen(int a, int b) {
    bool c = 0;
    if (((quadashen1[a] == playname1[b]) or (quadashen2[a] == playname1[b])) and
        ((quadashen1[b] == playname1[a]) or (quadashen2[b] == playname1[a]))) {c=1;};
    return c;
}
bool arequad(int a, int b) {
    bool c=0;
    if (areflush(a,b)==1) {c=1;};
    if (arepitch(a,b)==1) {c=1;};
    if (arepale(a,b)==1)  {c=1;};
    if (areashen(a,b)==1) {c=1;};
    return c;
}
int countquads(int a) {
    int c = 0;
    if (quadflush[a] != "") {c=c+1;};
    if (quadpitch[a] != "") {c=c+1;};
    if (quadpale[a] != "")  {c=c+1;};
    if ((quadashen1[a] != "") or (quadashen2[a] != "")) {c=c+1;};
    return c;
}

bool uniqueinitials(int a) {
    bool b = 1;
    for (int i=0; i<a; i++) {
        if (playinitials[a] == playinitials[i]) {b = 0;};
    }
    return b;
}

// This function does not know about the ashen quadrant.  Fix.
int SimilarityFunction(int ourguy, int sessionsize) {
    // ourguy is the number, 0 - 23, that indicates which troll we're finding a match for.
    // peepsimularity we will be using to rank which one is the best.
    int peepsimilarity[24] = {0};

    // Now, assign castes as numbers so we can compare them.
    int casterank[24] = {0};

    for (int i=0; i<sessionsize; i++) {
        if (playcol[i] == "Lime")         {casterank[i] = 0;};
        if (playcol[i] == "Off-spectrum") {casterank[i] = 0;};
        if (playcol[i] == "Maroon")       {casterank[i] = 1;};
        if (playcol[i] == "Bronze")       {casterank[i] = 2;};
        if (playcol[i] == "Gold")         {casterank[i] = 3;};
        if (playcol[i] == "Olive")        {casterank[i] = 5;};
        if (playcol[i] == "Jade")         {casterank[i] = 6;};
        if (playcol[i] == "Teal")         {casterank[i] = 7;};
        if (playcol[i] == "Cerulean")     {casterank[i] = 8;};
        if (playcol[i] == "Navy")         {casterank[i] = 9;};
        if (playcol[i] == "Indigo")       {casterank[i] = 10;};
        if (playcol[i] == "Violet")       {casterank[i] = 11;};
        if (playcol[i] == "Tyrian")       {casterank[i] = 12;};
    }
    for (int i=0; i<sessionsize; i++) {
        // find the distance in rank between ourguy and guy i; it is a number between 0 and 11.
        // subtract that distance from 11, so that Bigger Distance = Lower Number
        peepsimilarity[i] = 12 - abs (casterank[ourguy] - casterank[i]);
        // Make the numbers big, so we can add some noise in.
        peepsimilarity[i] = 100*peepsimilarity[i];
        // Now 100 points of similarity = 1 caste rank.
        // add the noise in : Now, even if no one has anything in common, they'll still have an order.
        int noiseforpreferences = rand() % (50) + 1;
        peepsimilarity[i] = peepsimilarity[i] + noiseforpreferences;
        // Do they share interests?
        if ((playinterest1[i] == playinterest1[ourguy]) or (playinterest1[i] == playinterest2[ourguy]))
            {peepsimilarity[i] = peepsimilarity[i] +250;};
        if ((playinterest2[i] == playinterest1[ourguy]) or (playinterest2[i] == playinterest2[ourguy]))
            {peepsimilarity[i] = peepsimilarity[i] +250;};
        // How about specibi?
        if (playspecibus[i] == playspecibus[ourguy]) {peepsimilarity[i] = peepsimilarity[i]+150;};
        // What about weapon?
        if (playweapon[i] == playweapon[ourguy]) {peepsimilarity[i] = peepsimilarity[i]+500;};
        // Subtract some if the troll in consideration has too many quads already.
        if (countquads(i) > 1)  {peepsimilarity[i] = peepsimilarity[i] - 100;};
        if (countquads(i) > 2)  {peepsimilarity[i] = peepsimilarity[i] - 100;};
        // Add some if troll I has zero quads
        if (countquads(i) == 0) {peepsimilarity[i] = peepsimilarity[i] + 100;};
        // and drop the rating into the dirt if the troll is 100% spoken for.
        if (countquads(i) > 3)  {peepsimilarity[i] = peepsimilarity[i] - 3000;};
        // And drop it lots if the troll is already quadranted to our guy.
        if (arequad(i,ourguy==1)) {peepsimilarity[i] = peepsimilarity[i] - 500;};
    }
    // Now let's make sure our guy won't quad himself.
    peepsimilarity[ourguy] = -9001;

// Make a variable to track rank, and fill it with the indexes of all trolls.
// finalrank[0] = the index of the first troll on the list; initially troll 0.
    int finalrank[24] = {0};
    for (int j=0; j<sessionsize; j++) {
        finalrank[j] = j;
    }
// Now use a simple inefficient sort, to shove higher-similarity trolls to the top of the list.
    for (int j=0; j<sessionsize; j++) {
        for (int i=0; i<sessionsize; i++) {
            if (peepsimilarity[i] > peepsimilarity[j]) {swap(finalrank[j],finalrank[i]);};
        }
    }
// Fix wrong options here.
// consider :  Can we make the "too many quads" quality check happen here?
    if (finalrank[0] == ourguy) {swap(finalrank[0],finalrank[1]);};
// They are now ranked in order of similarity.
    return finalrank[0];
}

void PrintPlayer(int i) {
    cout << playname1[i] << " " << playname2[i] << ", " << playcol[i] << ", " << playspecibus[i] << endl;
    cout << playinterest1[i] << " and " << playinterest2[i] << endl;
    cout << "weilds " << playweapon[i] << endl;
    if (quadflush[i] != "no one") { cout << " <3 " << quadflush[i];};
    if (quadpitch[i] != "no one") { cout << " <3< " << quadpitch[i];};
    if (quadpale[i] != "no one") { cout << " <> " << quadpale[i];};
    if (quadashen1[i] != "no one") { cout << " c3< " << quadashen1[i] << " / " << quadashen2[i];};
    cout << endl;
    cout << endl;
}

string getinitials()
{
    int x;
    string initial1 = "";
    x = rand() % (26) + 1;
    for (int i=0; i<2; i++) {

        if (x==1) {initial1 = initial1 + "A";};
        if (x==2) {initial1 = initial1 + "B";};
        if (x==3) {initial1 = initial1 + "C";};
        if (x==4) {initial1 = initial1 + "D";};
        if (x==5) {initial1 = initial1 + "E";};
        if (x==6) {initial1 = initial1 + "F";};
        if (x==7) {initial1 = initial1 + "G";};
        if (x==8) {initial1 = initial1 + "H";};
        if (x==9) {initial1 = initial1 + "I";};
        if (x==10) {initial1 = initial1 + "J";};
        if (x==11) {initial1 = initial1 + "K";};
        if (x==12) {initial1 = initial1 + "L";};
        if (x==13) {initial1 = initial1 + "M";};
        if (x==14) {initial1 = initial1 + "N";};
        if (x==15) {initial1 = initial1 + "O";};
        if (x==16) {initial1 = initial1 + "P";};
        if (x==17) {initial1 = initial1 + "Q";};
        if (x==18) {initial1 = initial1 + "R";};
        if (x==19) {initial1 = initial1 + "S";};
        if (x==20) {initial1 = initial1 + "T";};
        if (x==21) {initial1 = initial1 + "U";};
        if (x==22) {initial1 = initial1 + "V";};
        if (x==23) {initial1 = initial1 + "W";};
        if (x==24) {initial1 = initial1 + "X";};
        if (x==25) {initial1 = initial1 + "Y";};
        if (x==26) {initial1 = initial1 + "Z";};
    }
    return initial1;
}

string gethandle(string a) {
    // Each player has a unique set of initials, a.  Let's use them to create a trolltag.
    // functions take the form 'gethandle1A', 'gethandle2D', etc.
    string handle = "";
    string firstinitial = a[0];
    string secondtinitial = a[1];

    if (firstinitial == "A") {handle = gethandle1A;};
    if (firstinitial == "B") {handle = gethandle1B;};
    if (firstinitial == "C") {handle = gethandle1C;};
    if (firstinitial == "D") {handle = gethandle1D;};
    if (firstinitial == "E") {handle = gethandle1E;};
    if (firstinitial == "F") {handle = gethandle1F;};
    if (firstinitial == "G") {handle = gethandle1G;};
    if (firstinitial == "H") {handle = gethandle1H;};
    if (firstinitial == "I") {handle = gethandle1I;};
    if (firstinitial == "J") {handle = gethandle1J;};
    if (firstinitial == "K") {handle = gethandle1K;};
    if (firstinitial == "L") {handle = gethandle1L;};
    if (firstinitial == "M") {handle = gethandle1M;};
    if (firstinitial == "N") {handle = gethandle1N;};
    if (firstinitial == "O") {handle = gethandle1O;};
    if (firstinitial == "P") {handle = gethandle1P;};
    if (firstinitial == "Q") {handle = gethandle1Q;};
    if (firstinitial == "R") {handle = gethandle1R;};
    if (firstinitial == "S") {handle = gethandle1S;};
    if (firstinitial == "T") {handle = gethandle1T;};
    if (firstinitial == "U") {handle = gethandle1U;};
    if (firstinitial == "V") {handle = gethandle1V;};
    if (firstinitial == "W") {handle = gethandle1W;};
    if (firstinitial == "X") {handle = gethandle1X;};
    if (firstinitial == "Y") {handle = gethandle1Y;};
    if (firstinitial == "Z") {handle = gethandle1Z;};

    if (secondinitial == "A") {handle = handle + gethandle2A;};
    if (secondinitial == "B") {handle = handle + gethandle2B;};
    if (secondinitial == "C") {handle = handle + gethandle2C;};
    if (secondinitial == "D") {handle = handle + gethandle2D;};
    if (secondinitial == "E") {handle = handle + gethandle2E;};
    if (secondinitial == "F") {handle = handle + gethandle2F;};
    if (secondinitial == "G") {handle = handle + gethandle2G;};
    if (secondinitial == "H") {handle = handle + gethandle2H;};
    if (secondinitial == "I") {handle = handle + gethandle2I;};
    if (secondinitial == "J") {handle = handle + gethandle2J;};
    if (secondinitial == "K") {handle = handle + gethandle2K;};
    if (secondinitial == "L") {handle = handle + gethandle2L;};
    if (secondinitial == "M") {handle = handle + gethandle2M;};
    if (secondinitial == "N") {handle = handle + gethandle2N;};
    if (secondinitial == "O") {handle = handle + gethandle2O;};
    if (secondinitial == "P") {handle = handle + gethandle2P;};
    if (secondinitial == "Q") {handle = handle + gethandle2Q;};
    if (secondinitial == "R") {handle = handle + gethandle2R;};
    if (secondinitial == "S") {handle = handle + gethandle2S;};
    if (secondinitial == "T") {handle = handle + gethandle2T;};
    if (secondinitial == "U") {handle = handle + gethandle2U;};
    if (secondinitial == "V") {handle = handle + gethandle2V;};
    if (secondinitial == "W") {handle = handle + gethandle2W;};
    if (secondinitial == "X") {handle = handle + gethandle2X;};
    if (secondinitial == "Y") {handle = handle + gethandle2Y;};
    if (secondinitial == "Z") {handle = handle + gethandle2Z;};


    return handle;
}


int main()
{
    string userInput;
    int thekey = 1;
    srand( time(NULL) );

    // MAIN LOOP BEGINS
    while ( thekey != 0 ) {

        namegenerator tgen;

// Generate each troll's name, caste, interests, specibus, weapon....
    for (int i=0; i<sessionsize; i++) {
        if (sessionsize > i) {
                playcol[i] = GetCaste();
                playname1[i] = tgen.makename();
                playname2[i] = tgen.makename();
                playinterest1[i] = GetInterest();
                playinterest2[i] = playinterest1[i];
                while (playinterest2[i]==playinterest1[i]) {playinterest2[i]=GetInterest();};
                playinitials[i] = getinitials();
                while ((i>0) and (uniqueinitials==0)) {playinitials[i] = getinitials();};
                playhandle[i] = gethandle(playinitials[i]);
                playspecibus[i] = GetSpecibus();
                playweapon[i] = GetWeapon(playspecibus[i]);



                // Give certain bloodlines certain traits
                if (playname2[i]=="megido") {playcol[i]=="Maroon";};
                if (playname2[i]=="nitram") {playcol[i]=="Bronze";};
                if (playname2[i]=="captor") {playcol[i]=="Gold"; playinterest2[i]=="Video Games";};
                if (playname2[i]=="vantas") {playcol[i]=="Off-spectrum";};
                if (playname2[i]=="leijon") {playcol[i]=="Olive";};
                if (playname2[i]=="maryam") {playcol[i]=="Jade";};
                if (playname2[i]=="pyrope") {playcol[i]=="Teal";};
                if (playname2[i]=="serket") {playcol[i]=="Cerulean";};
                if (playname2[i]=="zahhak") {playcol[i]=="Navy"; playinterest2[i]=="Engineering";};
                if (playname2[i]=="makara") {playcol[i]=="Indigo";};
                if (playname2[i]=="ampora") {playcol[i]=="Violet";};
                if (playname2[i]=="peixes") {playcol[i]=="Tyrian";};
                if (playname2[i]=="furoze") {playcol[i]=="Lime"; playinterest2[i]=="Engineering";};
                if (playname2[i]=="kahrde") {playcol[i]=="Jade";};
                if (playname2[i]=="reisle") {playcol[i]=="Indigo";};
                // everyone likes their references..

        };
    }
// That was the shortest part of the entire program.  It's just pulling random entries out of lists.
// Now for the hard part :  Graph Theory.

// Quad time
// fuckin hell this is long...
if (sessionsize>3) {
    for (int i=0; i<sessionsize; i++) {
        if (sessionsize > i) {
            // Let's find a potential quadrant match.
            int dudenum = SimilarityFunction(i,sessionsize);
            // This is the person troll I has the most in common with.
            // If these two trolls are not yet quadranted
            if (arequad(i,dudenum)==0) {
                // randomly attempt to assign a quad between these two people (90% success):
                // This percentage thing leaves room to add polyquad, quadfluid, etc later.
                // 1/3 flush, 1/3 pitch, 1/3 pale, a few percent "no quad".
                // If the desired quad isn't available, it just fails --
                // --unless the desired quad is pitch, in which case it 25% turns ashen.
                int x = 0;
                x = rand() % (90) + 1;

/*flush*/       if ((x<25) and (quadflush[i] == "no one") and (quadflush[dudenum] == "no one"))
                    {quadflush[i] = playname1[dudenum]; quadflush[dudenum] = playname1[i];};
/*pitch*/       if ((x>24) and (x<50) and (quadpitch[i] == "no one") and (quadpitch[dudenum] == "no one"))
                    {quadpitch[i] = playname1[dudenum]; quadpitch[dudenum] = playname1[i];};
/*pale*/        if ((x>49) and (x<75) and (quadpale[i] == "no one") and (quadpale[dudenum] == "no one"))
                    {quadpale[i] = playname1[dudenum]; quadpale[dudenum] = playname1[i];};
/*ashen*/       if ((x>74) and (x<85) and (quadashen1[i] == "no one") and (quadashen1[dudenum]=="no one") and (arequad(i,dudenum)==0)) {
                    int ashencourt = SimilarityFunction(dudenum,sessionsize);
                    if ((quadashen1[ashencourt] == "no one") and (arequad(dudenum,ashencourt)==0) and (arequad(i,ashencourt)==0)) {
                        quadashen1[i] = playname1[dudenum];    quadashen2[i] = playname1[ashencourt];
                        quadashen1[dudenum] = playname1[i];    quadashen2[dudenum] = playname1[ashencourt];
                        quadashen1[ashencourt] = playname1[i]; quadashen2[ashencourt] = playname1[dudenum];
                        };
                    };

          }; // end  "If trolls are not quadranted to eachother"

          // Sometimes trolls quadrant their inclade.  Let's do that.

          // If our dude I shares a quadrant with Dudenum;
          if (arequad(i,dudenum)) {
          // i is the index of our troll, and dudenum indexes a quadrant mate of theirs.
          // x = random number, y = index of clademate's quadrant, z = 2nd inclade, quadfound = binary flag
          int x,y,z,quadfound = 0;
          x = rand() % (100) + 1;  // controls failure chance of The Dreaded Triangle

// THE DREADED PALE-PITCH-FLUSH TRIANGLE:
              // if clademate has a flush partner other than our guy
              if ((quadflush[dudenum] != "no one") and (quadflush[dudenum] != playname1[i]) and (quadfound==0)) {
                // find their index
                for (int i=0; i<sessionsize; i++) {if (quadflush[dudenum]==playname1[i]) {y=i;};};

                // If troll I and Y are unquadranted, try to quadrant them, pale then pitch
                // THE TRIANGLE
                if ((quadpale[i] == "no one") and (quadpale[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadpale[i] = playname1[y]; quadpale[y] = playname1[i]; quadfound=1;};
                if ((quadpitch[i] == "no one") and (quadpitch[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadpitch[i] = playname1[y]; quadpitch[y] = playname1[i]; quadfound=1;};
              }; // end clademate's flush partner

              // if clademate has a pale partner other than our guy, and no quad has been found yet...
              if ((quadpale[dudenum] != "no one") and (quadpale[dudenum] != playname1[i]) and (quadfound==0)) {
                // find their index
                for (int i=0; i<sessionsize; i++) {if (quadpale[dudenum]==playname1[i]) {y=i;};};
                // If troll I and Y are unquadranted, try to quadrant them, flush then pitch
                // THE TRIANGLE
                if ((quadflush[i] == "no one") and (quadflush[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadflush[i] = playname1[y]; quadflush[y] = playname1[i]; quadfound=1;};
                if ((quadpitch[i] == "no one") and (quadpitch[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadpitch[i] = playname1[y]; quadpitch[y] = playname1[i]; quadfound=1;};
              }; // end clademate's pale partner

              // if clademate has a pitch partner other than our guy, and no quad has been found yet...
              if ((quadpitch[dudenum] != "no one") and (quadpitch[dudenum] != playname1[i]) and (quadfound==0)) {
                // find their index
                for (int i=0; i<sessionsize; i++) {if (quadpitch[dudenum]==playname1[i]) {y=i;};};
                // If troll I and Y are unquadranted, try to quadrant them, flush then pale
                // THE TRIANGLE
                if ((quadflush[i] == "no one") and (quadflush[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadflush[i] = playname1[y]; quadflush[y] = playname1[i]; quadfound=1;};
                if ((quadpale[i] == "no one") and (quadpale[y] == "no one") and (arequad(i,y)==0) and (x>75))
                    {quadpale[i] = playname1[y]; quadpale[y] = playname1[i]; quadfound=1;};
              }; // end clademate's pitch partner
// END PALE-PITCH-FLUSH TRIANGLE

// Begin SQUARES
	      // if INCLADE has a flush partner other than our dude and his quadrant,
              if ((quadflush[y] != "no one") and (areflush(i,y)==0) and (areflush(y,dudenum)==0) and (quadfound==0)) {
                // find their index
                for (int a=0; a<sessionsize; a++) {if (quadflush[y]==playname1[a]) {z=a;};};
		        // I is who we're checking.  Dudenum is his quadrant.  Y is dudenum's quadrant.  Z is Y's quadrant.
                // They are all distinct people with different names.
                // If troll I and Z are unquadranted, try to quadrant them, pale then pitch
                if ((quadpale[i] == "no one") and (quadpale[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadpale[i] = playname1[z]; quadpale[z] = playname1[i]; quadfound=1;};
                if ((quadpitch[i] == "no one") and (quadpitch[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadpitch[i] = playname1[z]; quadpitch[z] = playname1[i]; quadfound=1;};
                };

	      // if INCLADE has a pale partner other than our dude and his quadrant,
              if ((quadpale[y] != "no one") and (arepale(i,y)==0) and (arepale(y,dudenum)==0) and (quadfound==0)) {
                // find their index
                for (int a=0; a<sessionsize; a++) {if (quadpale[y]==playname1[a]) {z=a;};};
   		        // I is who we're checking.  Dudenum is his quadrant.  Y is dudenum's quadrant.  Z is Y's quadrant.
                // They are all distinct people with different names.
                // If troll I and Z are unquadranted, try to quadrant them, flush then pitch
                if ((quadflush[i] == "no one") and (quadflush[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadflush[i] = playname1[z]; quadflush[z] = playname1[i]; quadfound=1;};
                if ((quadpitch[i] == "no one") and (quadpitch[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadpitch[i] = playname1[z]; quadpitch[z] = playname1[i]; quadfound=1;};
                };
	      // if INCLADE has a pitch partner other than our dude and his quadrant,
              if ((quadpitch[y] != "no one") and (arepitch(i,y)==0) and (arepitch(y,dudenum)==0) and (quadfound==0)) {
                // find their index
                for (int a=0; a<sessionsize; a++) {if (quadpitch[y]==playname1[a]) {z=a;};};
		        // I is who we're checking.  Dudenum is his quadrant.  Y is dudenum's quadrant.  Z is Y's quadrant.
                // They are all distinct people with different names.
                // If troll I and Z are unquadranted, try to quadrant them, flush then pale
                if ((quadflush[i] == "no one") and (quadflush[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadflush[i] = playname1[z]; quadflush[z] = playname1[i]; quadfound=1;};
                if ((quadpale[i] == "no one") and (quadpale[z] == "no one") and (arequad(i,z)==0) and (x<90))
                    {quadpale[i] = playname1[z]; quadpale[z] = playname1[i]; quadfound=1;};
                };
// END SQUARES
            quadfound=0; // clear your variables, children...
            y=0;
            z=0;
          }; // end "Quad your inclade"
        }; // end "i and dudenum are quadded"
    }; // end For Each Troll loop
   }; // end "Only with 3+ trolls" limit
// Print results

    for (int i=0; i<sessionsize; i++) {
        if (sessionsize > i) {
                PrintPlayer(i);
        };
    }

// shit let's clear some variables

    for (int i=0; i<24; i++) {
    quadflush[i] = "no one";
    quadpitch[i] = "no one";
    quadpale[i] = "no one";
    quadashen1[i] = "no one";
    quadashen2[i] = "no one";
    playcol[i] = "";
    playname1[i] = "";
    playname2[i] = "";
    playinterest1[i] = "";
    playinterest2[i] = "";
    playspecibus[i] = "";
    playweapon[i] = "";
    };


        // Horn Description :  things like "Long and swept back", roll a percentage to see if you get 1 or 2 horn descs
        // Tooth/lip/eye, and facial mutation description : some may conflict, have a tree to call non-conflicting combinations.

        // Wait for Input
        // repeat program unless input is "0"
        cout << endl << endl << "Generate how many trolls (max 24)?" << endl;
        getline (cin,userInput);
        stringstream(userInput) >> thekey;
        if ((thekey > 0) and (thekey <25)) {sessionsize = thekey;};
    }
    // END MAIN LOOP
    return 0;
}
